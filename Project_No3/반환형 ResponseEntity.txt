화면의 이동 없이 서버와 뷰가 정보를 주고받는 비동기 방식
비동기 방식의 서버에서 뷰로 데이터를 전송하기 위해선 Controller의 url 매핑 메서드에 @ResponseBody 어노테이션을 붙여 주거나
메서드의 반환 타입을 ResponseEntity 방식으로 하면 됩니다 (혹은 두 가지 동시에 사용)

@Responsebody와 ResponseEntity 모두 서버에서 뷰로 전송하는 Http body에 뷰로 전달하고 싶은 데이터를 포함시켜서 보낸 다는 점을 동일

다른 점은 ResponseEntity의 경우 뷰로 전송될 HTTP의 세부 정보를 조작하여 뷰로 전송할 수 있다는 점

HTTP는 크게 'status', 'header', 'body' 3개의 범주로 구성되어 있는데 ResponseEntity 클래스에는 'status'와 'header'의 속성들을 조작할 수 있는 메서드들을 제공
(@ResponseBody 는 이름에서 알 수 있듯이 데이터를 자바 객체를 body로 변환하여 반환하기만 함)

ResponseEntity에 Response의 header에 대한 설정을 추가해주기 위해 아래의 생성자를 사용
ResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus status)
첫 번째 파라미터는 body에 첨부할 데이터를 추가
두 번째 파라미터의 경우 header의 설정이 부여된 객체를 추가,
	객체의 타입이 MultiValueMap 클래스 타입이어야 한다고 명시되어 있는데 MultiValueMap 클래스를 상속한 HttpHeader 클래스를 사용
세 번째 클래스의 경우 전송하고자 하는 상태 코드와 관련된 코드를 추가 */

//뷰로 반환할 ResponseEntity 객체의 주소를 저장할 참조 변수를 선언하고 null로 초기화
ResponseEntity<byte[]> result = null;

try {

	//ResponseEntity에 Response의 header와 관련된 설정의 객체를 추가해주기 위해서 HttpHeaders를 인스턴스화
	HttpHeaders header = new HttpHeaders();
	
	/* header의 'Content Type' 속성 값에 이미지 파일 MIME TYPE을 추가해주기 위해서 HttpHeader 클래스에 있는 add() 메서드를 사용
	 * 첫 번째 파라미터에는 Response header의 '속성명'을, 두 번째 파라미터에는 해당 '속성명'에 부여할 값(value)을 삽입 */
	//header의 'Content Type'에 대상 파일의 MIME TYPE을 부여
	header.add("Content-type", Files.probeContentType(file.toPath()));
	
	// 대상 이미지 파일, header 객체, 상태 코드를 인자 값으로 부여한 생성자를 통해 ResponseEntity 객체를 생성
	result = new ResponseEntity<>(FileCopyUtils.copyToByteArray(file), header, HttpStatus.OK);
	
	/* FileCopyUtils 클래스는 파일과 stream 복사에 사용할 수 있는 메서드를 제공하는 클래스
	 * 해당 클래스 중 copyToByteArray() 메서드는 파라미터로 부여하는 File 객체 즉, 대상 파일을 복사하여 Byte 배열로 반환
	 * 두 번째 파라미터는 'Content-Type' 속성을 지정 해준 HttpHeader 객체(변수 header)를 인자로 부여
	 * 세 번째 파라미터는 성공 상태(status) 코드 200이 전송되도록 인자 값을 작성 */
	 
}
catch (IOException e) {
	e.printStackTrace();
}






출처 https://devlog-wjdrbs96.tistory.com/182

ResponseEntity란?
Spring Framework에서 제공하는 클래스 중 HttpEntity라는 클래스가 존재한다
이것은 HTTP 요청(Request) 또는 응답(Response)에 해당하는 HttpHeader와 HttpBody를 포함하는 클래스이다

public class HttpEntity<T> {

	private final HttpHeaders headers;

	@Nullable
	private final T body;
}

public class RequestEntity<T> extends HttpEntity<T>

public class ResponseEntity<T> extends HttpEntity<T>



HttpEntity 클래스를 상속받아 구현한 클래스가 RequestEntity, ResponseEntity 클래스이다
ResponseEntity는 사용자의 HttpRequest에 대한 응답 데이터를 포함하는 클래스이다
따라서 HttpStatus, HttpHeaders, HttpBody를 포함한다 

ResponseEntity의 생성자를 보면 this( )를 통해서 매개변수가 3개인 생성자를 호출해 결국엔 아래 보이는 매개변수가 3개인 생성자로 가게된다

public ResponseEntity(HttpStatus status) {
	this(null, null, status);
}

public ResponseEntity(@Nullable T body, HttpStatus status) {
	this(body, null, status);
}



간단한 예시를 들어보자

@RestController
public class SampleController {

    @GetMapping("users")
    public ResponseEntity getAllUsers() {
        return new ResponseEntity(HttpStatus.OK);
    }
}

위와 같이 코드를 짜고 postMan으로 요청을 보내면 상태코드가 200으로 오는 것을 확인할 수 있다



또한 상태코드(Status), 헤더(headers), 응답데이터(ResponseData)를 담는 생성자도 존재한다

public class ResponseEntity<T> extends HttpEntity<T> {
	
	public ResponseEntity(@Nullable T body, @Nullable MultiValueMap<String, String> headers, HttpStatus status) {
		super(body, headers);
		Assert.notNull(status, "HttpStatus must not be null");
		this.status = status;
	}
}

그리고 이제 ResponEntity를 이용해서 클라이언트에게 응답을 보내는 예제를 정리해보자

import lombok.Data;

@Data
public class Message {

    private StatusEnum status;
    private String message;
    private Object data;

    public Message() {
        this.status = StatusEnum.BAD_REQUEST;
        this.data = null;
        this.message = null;
    }
}

Message라는 클래스를 만들어 상태코드, 메세지, 데이터를 담을 필드를 추가한다

public enum StatusEnum {

    OK(200, "OK"),
    BAD_REQUEST(400, "BAD_REQUEST"),
    NOT_FOUND(404, "NOT_FOUND"),
    INTERNAL_SERER_ERROR(500, "INTERNAL_SERVER_ERROR");

    int statusCode;
    String code;

    StatusEnum(int statusCode, String code) {
        this.statusCode = statusCode;
        this.code = code;
    }
}

그리고 상태코드로 보낼 몇가지의 예시만 적어놓은 enum을 만들었다

@RestController
public class UserController {
    private UserDaoService userDaoService;

    public UserController(UserDaoService userDaoService) {
        this.userDaoService = userDaoService;
    }

    @GetMapping(value = "/user/{id}")
    public ResponseEntity<Message> findById(@PathVariable int id) {
        User user = userDaoService.findOne(id);
        Message message = new Message();
        HttpHeaders headers= new HttpHeaders();
        headers.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));

        message.setStatus(StatusEnum.OK);
        message.setMessage("성공 코드");
        message.setData(user);

        return new ResponseEntity<>(message, headers, HttpStatus.OK);
    }
}

그리고 위와 같이 Controller를 하나 만든 후에,
id를 통해서 User를 가져오고 Message 클래스를 통해서 StatusCode, ResponseMessage, ResponseData를 담아서 클라이언트에게 응답을 보내는 코드이다
(User 클래스는 만들기 나름이기 때문에 자유롭게 만들면 되고, 코드는 생략) 이제 실행을 해보고 포스트맨으로 결과를 확인해보자