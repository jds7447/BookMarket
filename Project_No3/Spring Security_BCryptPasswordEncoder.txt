비밀번호를 DB에 저장, DB 자체에 보안이 되어 있을 것이지만 만약 뚫리게 된다면 비밀번호가 무방비하게 노출
이러한 문제점을 보완하기 위해 비밀번호가 노출이 되더라도 알아볼 수 없도록 암호화하는 방법
비밀번호를 인코딩(암호화) 해주고 사용자가 제출한 비밀번호와 DB에 저장된 인코딩 된 비밀번호가 일치하는지 확인해주는 메서드를 제공해주는 클래스가 BCryptPasswordEncoder



BCryptPasswordEncoder
BCrypt 해싱 함수(BCrypt hashing function)를 사용해서 단방향 암호화 기능을 제공 및
비밀번호를 인코딩해주는 메서드와 사용자의 의해 제출된 비밀번호와 저장소에 저장되어 있는 비밀번호의 일치 여부를 확인해주는 메서드를 제공
PasswordEncoder 인터페이스를 구현한 클래스
생성자의 인자 값(verstion, strength, SecureRandom instance)을 통해서 해시의 강도를 조절
strength는 디폴트로 10 (아래의 salt 길이를 의미)



출처 https://jaimemin.tistory.com/2082

String encode(CharSequence rawPassword)
	패스워드를 암호화해주는 메서드이며 해당 메서드는 SHA-2 이상의 알고리즘, 8바이트로 결합된 해쉬, 그리고 랜덤 하게 생성된 솔트를 지원
	(SHA-1은 Hash 충돌이 발견됐기 때문에 사실상 퇴출)
	매개변수로 CharSequence 타입의 데이터를 넣어주면 되며 String, StringBuffer, StringBuilder 등이 이에 해당
	반환 타입은 String 타입
	똑같은 비밀번호를 입력하더라도 해당 메서드는 salt를 결합한 뒤 인코딩을 하기 때문에 매번 다른 결과가 나옴

 
boolean matches(CharSequence rawPassword, String encodePassword)
	입력된 평문 패스워드와 encode 메서드를 통해 인코딩된 패스워드의 동일 여부 파악에 사용
	첫 번째 인자로 평문 패스워드, 두 번째 패스워드로 인코딩된 패스워드
	반환 타입은 boolean 타입

 
boolean upgradeEncoding(String encodePassword)
	인코딩 된 패스워드가 안전한지 파악하는 함수
	매개변수로 인코딩 된 패스워드를 넣어주면 반환 타입은 boolean 타입이며 안전하다면 false, 안전하지 못해서 추가적으로 인코딩해야 한다면 true 반환
	encode() 메서드를 통해 인코딩된 암호들은 기본적으로 안전하다고 판단하여 false 반환
	다른 함수를 통해 인코딩된 암호의 안전 여부를 파악하는 데 사용하면 좋을 것 같음
