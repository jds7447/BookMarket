<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.market.mapper.AdminMapper">

	<!-- 상품 등록 -->
  	<insert id="bookEnroll">
  		<!-- <selectkey> : 자동생성키 컬럼(autoincrement(mysql), IDENTITY(Orace))을 지원하지 않는 데이터베이스에 자동생성키 기능과 비슷한 효과를 구현하거나,
  			쿼리(예를 들어 insert)에서 수행된 특정 칼럼 값을 반환받기 위해 사용 -->
  		<!-- <selectKey resultType="int" keyProperty="bookId" order="BEFORE"> -->   <!-- 등록한 'bookId' 컬럼(Column)값을 반환 (이미지 테이블용) -->
  		<!-- 해석을 하면 oreder의 속성 값이 "BEFORE"이기 때문에 '상품 정보'를 등록하는 insert문이 실행되기 전에 <selectkey> 태그 내의 쿼리문이 실행이 되고,
  		쿼리 문의 결과 값이 keyProperty 속성 값으로 지정한 'bookId'(BookVO 멤버 변수)에 resultType 속성 값으로 지정한 int 타입으로 반환한다는 의미
		<selectKey>태그 내부의 쿼리문은 book_goods 테이블의 'bookId' 칼럼 값 중 가장 큰 값(MAX(bookId))을 가져와서 거기에 +1을 해준 결과를 반환
		이는 insert문의 결과로 삽입될 'bookId' 칼럼(Column)의 값이 기존 'bookId'값들 중 가장 큰 값에서 +1 된 값이기 때문 -->
  			<!-- SELECT MAX(bookId)+1 FROM book_goods -->
  		<selectKey resultType="int" keyProperty="bookId" order="AFTER">
  		<!-- 기존 컬럼을 지우고 새로운 상품 등록을 하면 잘못된 값을 가져오는 점을 보완하고자
  			order="AFTER" 를 통해 insert 문이 싱행 후 동작하는 방식으로 변경하고,
  			book_goods 테이블의 기본키인 bookId 컬럼에 사용하는 시퀀스의 현재 값을 가져오는 쿼리로 변경 -->
  			SELECT seq_bookgoods_num.currval from dual
  		</selectKey> 
  		
  		insert into book_goods(bookId, bookName, authorId, publeYear, publisher, cateCode, bookPrice, bookStock, bookDiscount, bookIntro, bookContents)
		values(seq_bookgoods_num.nextval, #{bookName}, #{authorId}, #{publeYear}, #{publisher}, #{cateCode}, #{bookPrice}, #{bookStock}, #{bookDiscount}, #{bookIntro}, #{bookContents})
  	</insert>
  	
  	<!-- 카테고리 리스트 -->
  	<select id="cateList" resultType="com.market.model.CateVO">
		select * from book_bcate order by catecode
  	</select>
  	
  	<!-- 상품 리스트 -->
  	<!-- '상품 목록(상품 관리)' 페이지에 출력시킬 열들의 정보는 'bookId', 'bookName', 'authorName', 'cateName', 'bookPrice', 'bookStock' 입니다
  		문제는 'bookName', 'cateName' 열의 정보는 "vam_book" 테이블에 있지 않습니다
  		따라서 같이 출력 되록해주기 위해선 '서브 쿼리' 혹은 '조인'을 사용해야 합니다 -->
  	<select id="goodsGetList" resultType="com.market.model.BookVO">
	  	<![CDATA[
		select * from( 
		    select /*+INDEX_DESC(book_goods SYS_C009231)*/ rownum as rn, bookId, bookName, 
		        (select authorName from book_author where book_goods.authorId = book_author.authorId) authorName, 
		        (select cateName from book_bcate where book_goods.cateCode = book_bcate.cateCode) cateName, bookStock, regDate 
		    from book_goods 
		    where 
		]]>
		
		    <if test="keyword != null">
			    bookName like '%' || #{keyword} || '%' and
		    </if>
		    
		<![CDATA[    
		    rownum <= #{pageNum} * #{amount} 
		    )
		where rn > (#{pageNum} -1) * #{amount}		  	
  		]]>
  	</select>
  	
  	<!-- 상품 총 개수 -->
  	<select id="goodsGetTotal" resultType="int">
  		select count(*) from book_goods
  		
  		<if test="keyword != null">
  			where bookName like '%' || #{keyword} || '%'
  		</if>
  	</select>
  	
  	<!-- 상품 상세 조회 페이지 - 사용자가 보기 편하도록 작가ID가 아닌 작가 이름이 나오도록 서브쿼리를 삽입 -->
	<select id="goodsGetDetail" resultType="com.market.model.BookVO">
		select bookId, bookName, (select authorName from book_author where authorId = book_goods.authorId) authorName, 
			authorId, publeYear, publisher, cateCode, bookPrice, bookStock, bookDiscount, bookIntro, bookContents, regDate, updateDate 
		from book_goods 
		where bookId = #{bookId}
	</select>
	
	<!-- 상품 정보 수정 -->
	<update id="goodsModify">
		update book_goods set bookName = #{bookName}, authorId = #{authorId}, publeYear = #{publeYear}, publisher = #{publisher}, cateCode = ${cateCode}, 
		bookPrice = #{bookPrice}, bookStock = #{bookStock}, bookDiscount = #{bookDiscount}, bookIntro = #{bookIntro}, bookContents = #{bookContents}, updateDate = sysdate
		where bookId = ${bookId}
	</update>
	
	<!-- 상품 정보 삭제 -->
	<delete id="goodsDelete">
		delete from book_goods where bookId = #{bookId}
	</delete>
	
	<!-- 이미지 등록 -->
	<insert id="imageEnroll">
		insert into book_image(bookId, fileName, uploadPath, uuid) values (#{bookId}, #{fileName}, #{uploadPath}, #{uuid})
	</insert>

</mapper>