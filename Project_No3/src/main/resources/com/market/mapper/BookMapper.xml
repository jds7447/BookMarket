<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.market.mapper.BookMapper">

	<!-- criteria2 (검색조건) -->
	<sql id="criteria2">
		<trim prefix="(" suffix=") AND" prefixOverrides="AND">   <!-- trim 태그 내부의 쿼리 처음 시작은 "(" 로 시작하고 마지막은 ") AND" 로 끝 -->
			<foreach collection="typeArr" item="type">   <!-- typeArr 배열을 전달 받아 type 이라는 변수로 하나씩 꺼내 사용 (확장 for문) -->
				<trim prefix="AND">   <!-- type이 여러 개일 경우 두 번째 쿼리부터 앞에 "AND" 적용 (제일 밖 trim 태그 prefixOverrides="AND" 속성으로 첫 번째 쿼리 앞 "AND" 는 지움) -->
					<choose>   <!-- Switch~case 문처럼 when 태그 test 조건에 맞는 쿼리 적용 -->
						<when test="type == 'A'.toString()">   <!-- 작가 검색 -->
							<trim prefix="(" suffix=")" prefixOverrides="OR">   <!-- 작가 리스트를 배열로 전달 받기 때문에 여러 작가 검색을 위한 OR 조건 설정 -->
								<foreach collection="authorArr" item="authorId">
									<trim prefix="OR">
										authorId = #{authorId}
									</trim>
								</foreach>
							</trim>
						</when>
						<when test="type == 'C'.toString()">   <!-- 카테고리 검색 -->
							cateCode like '%' || #{cateCode} || '%'
						</when>
						<when test="type == 'T'.toString()">   <!-- 상품 이름 검색 -->
							bookName like '%' || #{keyword} || '%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

	
	<!-- 상품 검색 -->
	<select id="getGoodsList" resultType="com.market.model.BookVO">
		<![CDATA[
		    select * from(
		        select /*+INDEX_DESC(book_goods SYS_C009231)*/ rownum as rn, bookId, bookName,
		            (select authorName from book_author where book_goods.authorId = book_author.authorId) authorName, authorId,
		            (select cateName from book_bcate where book_goods.cateCode = book_bcate.cateCode) cateName, cateCode, publisher, publeYear, bookPrice, bookDiscount 
		        from book_goods
		        where 
	    ]]>
	    
	    <include refid="criteria2"></include>
	    
	    <![CDATA[
		        rownum <= #{pageNum} * #{amount} 
	        	)
	        where rn > (#{pageNum} -1) * #{amount}
		]]>
	</select>
	
	<!-- 상품 총 개수 -->
	<select id="goodsGetTotal" resultType="int">
		select count(*) from book_goods
		where
		
		<include refid="criteria2"></include> 
		
		bookId > 0
	</select>
	
	<!-- 작가 id 리스트 요청 -->
	<select id="getAuthorIdList" resultType="String">
		select authorId from book_author where authorName like '%' || #{keyword} || '%'
	</select>
	
	<!-- 국내 카테고리 리스트 -->
	<select id="getCateCode1" resultType="com.market.model.CateVO">
		<![CDATA[
			select * from book_bcate where cateCode > 100000 and cateCode < 200000
		]]>
	</select>
	
	<!-- 외국 카테고리 리스트 -->
	<select id="getCateCode2" resultType="com.market.model.CateVO">
		<![CDATA[
			select * from book_bcate where cateCode > 200000 and cateCode < 300000
		]]>
	</select>
	
	<!-- 검색 대상 카테고리 리스트 -->
	<select id="getCateList" resultType="String">
		select DISTINCT cateCode from book_goods where    <!-- DISTINCT : 검색 데이터들의 중복 없음 -->
		<foreach collection="typeArr" item="type">		
			<choose>
				<when test="type == 'A'.toString()">   <!-- 검색 타입이 작가일 경우 -->
					<trim prefixOverrides="OR">
	 					<foreach collection="authorArr" item="authorId">
	 						<trim prefix="OR">
	 							authorId = #{authorId}
	 						</trim>
	 					</foreach>  						
					</trim>
				</when>
				<when test="type == 'T'.toString()">   <!-- 검색 타입이 책 이름일 경우 -->
					bookName like '%' || #{keyword} || '%'
				</when>  					
			</choose>
  		</foreach>
	</select>
	
	<!-- 카테고리 정보 (+검색대상 갯수) -->
	<!-- '개수'데이터를 얻기 위해서 "COUNT()"함수를 사용
	주의할 점은 별칭을 반드시 주어야 한다는 점
	별칭을 주지 않는다면 메서드 반환 객체인 CateFilterDTO의 cateCount 변수에 데이터가 저장되지 않은 채 반환
	MyBatis는 '자바 빈 규약'에 따라서 지정한 반환 타입에 데이터를 세팅하게 되는데,
	SELECT문에 지정한 컬럼(Column)이름에 따라 "set컬럼이름" 메서드를 호출하여 객체의 변수들에 데이터를 세팅을 하기 때문
	Oracle의 경우 GORUP BY 키워드를 사용하지 않으면 오류가 뜹니다
	COUNT() 함수를 사용하여서 중복되지 않은 결과들이 뜨긴 하지만, 좀 더 명확히 하기 위해 DISTINCT를 같이 작성
	DISTINCT를 쓰든 쓰지 않든 의도한 결과가 뜹니다 -->
	<select id="getCateInfo" resultType="com.market.model.CateFilterDTO">
		select DISTINCT count(*) cateCount, a.cateCode, b.cateName 
		from book_goods a left join book_bcate b    <!-- 상품 테이블 기분으로 카테고리 테이블을 아우터 조인 (상품 테이블은 모두 표시되고 상품 테이블에 매칭되지 않는 카테고리 테이블은 null) -->
		on a.cateCode = b.cateCode    <!-- 각 테이블의 cateCode 컬럼으로 매칭 -->
		where 
		<foreach collection="typeArr" item="type">		
			<choose>
				<when test="type == 'A'.toString()">   <!-- 검색 타입이 작가일 경우 -->
					<trim prefix="(" suffix=")" prefixOverrides="or">
	 					<foreach collection="authorArr" item="authorId">
	 						<trim prefix="or">
	 							authorId = #{authorId}    <!-- 작가 번호가 같고 -->
	 						</trim>
	 					</foreach>
					</trim>
					and a.cateCode = #{cateCode}    <!-- 카테고리 번호가 같을 것 -->
				</when>
				<when test="type == 'T'.toString()">   <!-- 검색 타입이 책 이름일 경우 -->
					bookName like '%' || #{keyword} || '%' and a.cateCode = #{cateCode}
				</when>
			</choose>
		</foreach>
  		group by a.cateCode, b.cateName    <!-- 상품테이블 카테고리 번호로 오름차순 정렬, 카테고리 번호 같으면 카테고리테이블 카테고리 이름으로 오름차순 정렬 -->
	</select>
	
	<!-- 상품 상세 정보 -->
	<select id="getGoodsInfo" resultType="com.market.model.BookVO">
			select a.BOOKID, a.BOOKNAME, a.AUTHORID, b.AUTHORNAME, a.PUBLEYEAR, a.PUBLISHER, a.CATECODE, c.CATENAME, a.BOOKPRICE, a.BOOKSTOCK, a.BOOKDISCOUNT, a.BOOKINTRO, a.BOOKCONTENTS
			from book_goods a left outer join book_author b on a.authorId = b.authorId
			left outer join book_bcate c on a.catecode = c.catecode
			where bookid = ${bookId}	
	</select>
	
	<!-- 상품 id 이름 -->
	<select id="getBookIdName" resultType="com.market.model.BookVO">
		select bookId, bookName from book_goods 
		where bookId = #{bookId}
	</select>
	
	<!-- 평점순 상품 정보 -->
	<select id="likeSelect" resultType="com.market.model.SelectDTO">
		select * from
		(select bookId, bookName, ratingAvg, (select cateName from book_bcate where book_goods.cateCode = book_bcate.cateCode) as cateName
		from book_goods
		order by ratingAvg desc nulls last)
		<![CDATA[
		where rownum < 9
		]]>
	</select>
	<!-- order by 뒤 "nulls last"
		book_goods의 ratingAvg에는 기본값을 따로 주지 않았기 때문에 값을 부여하지 않았다면 null값이 들어가게 됩니다
		정렬을 했을 때 만약 null값이 포함이 되어 있다면 정렬된 값보다 null값이 앞에 배치된 결과를 반환받게 됩니다
		null값이 있을 경우 null값을 앞에 배치할지 뒤에 배치할지를 "nulls last", "nulls first" 키워드를 통해서 조정 -->
	
</mapper>