<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 속성 값을 앞에서 생성하고 작성한 Mapper 인터페이스의 경로를 포함하는 인터페이스의 이름을 작성하여
	MyBatis가 Mapper 인터페이스와 XML을 인터페이스 이름과 namespace 속성 값을 가지고 판단
	인터페이스 이름과 namespace 속성 값이 동일한 이름이면 이를 병합해서 처리하는데,
	이러한 경우에는 메서드 선언은 인터페이스에 존재하고 SQL에 대한 처리는 XML을 이용 -->
<mapper namespace="com.market.mapper.MemberMapper">

	<!-- 회원 등록(가입) -->
	<!-- adminCk는 회원가입 시 기본적으로 일반회원으로 등록하기 위해 0을 삽입 -->
	<!-- money, point의 경우 추후에 회원이 물품을 구매하는 기능을 구현 및 시험하기 위해 회원에게 10만 원과 5천 포인트를 기본으로 가질 수 있도록 -->
	<insert id="memberJoin">
  		insert into book_member 
  		values(#{memberId}, #{memberPw}, #{memberName}, #{memberMail}, #{memberAddr1}, #{memberAddr2}, #{memberAddr3}, 0, sysdate, 100000, 5000)
  	</insert>
  	
  	<!-- 회원가입 아이디 중복검사 -->
  	<select id="idCheck" resultType="int">
  		select count(*) from book_member where memberId = #{memberId}
  	</select>
  	
  	<!-- 로그인 -->
    <select id="memberLogin" resultType="com.market.model.MemberVO">
    	<!-- DB에 저장된 비밀번호는 암호화 된 데이터라 사용자가 올바른 아이디와 비밀번호를 제출하더라도 memberPw = #{memberPw} 는 불일치
    			그래서 비밀번호를 조건절이 아닌 반환 받는 데이터(select절)로 변경 -->
		<!-- select memberId, memberName, adminck, money, point from book_member where memberId = #{memberId} and memberPw = #{memberPw} -->
		select memberId, memberPw, memberName, adminck, money, point from book_member where memberId = #{memberId}
    </select>
    
    <!-- 주문자 정보 -->
  	<select id="getMemberInfo" resultType="com.market.model.MemberVO">
  		SELECT memberId, memberName, memberMail, memberAddr1, memberAddr2, memberAddr3, money, point 
  		FROM book_member 
  		WHERE memberId = #{memberId}
  	</select>

</mapper>