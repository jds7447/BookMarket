출처 https://binit.tistory.com/28

xml 형식 데이터와 java 객체의 상호 변환이 가능하게 하는 라이브러리

1. Jackson Dataformat XML dependency 추가
xml 형식 데이터 ↔ Java 오브젝트 상호 변환이 가능하게 하는 Jackson Dataformat XML을 pom.xml에 추가해야 한다
Maven Repository에서 가져온 아래 소스를 복사하여 dependencdependencies에 추가한다
<!-- https://mynrepository.com/artifact/com. fasterxml.jackson.dataformat/jackson-dataformat-xml --> 
<dependency>
	<groupId>com. fasterxml.jackson.dataformat</groupId>
	<artifactId>jackson-dataformat-xml</artifactId>
	<version>2.11.2</version>
</dependency>



2. 출력할 데이터 형식 정의
데이터 클래스를 작성하여 xml 출력 형식을 정해야 한다
Memberxml이라 하는 데이터 통신용 클래스를 작성한다고 하자
사용할 필드는 다음과 같다

<MemberXml.java>
@Data
@NOArgsConstructor
@AllArgsConstructor
public class Memberxml {
	private Integer id;
	private String name;
	private Integer age;
	private String dept;
}
※ 여기서는 데이터용 클래스에 Lombok(롬복) 라이브러리를 사용하고 있기 때문에, getter setter 생성자 등등 기본적으로 필요한 메소드는 어노테이션으로 자동으로 작성

이제 xml 형식으로 Serialize 하기위해 pom.xml에 추가한 jackson 라이브러리를 이용해야 한다

<MemberXml.java>
@Data
@NOArgsConstructor
@AllArgsConstructor
@JacksonXmlRootElement(local Name = "xmember")
public class MemberXml {
	@JacksonXm I Property isAttribute = true) private Integer id;
	@JacksonXm I Property private String name;
	@JacksonXmI Property private Integer age;
	@JacksonXmI Property private String dept;
}

어노테이션 설명
@JacksonXmlRootElement(localName = "xmember")
	- localName으로 설정한 값을 루트 요소로 지정한다
	- localName을 지정하지 않으면 클래스명이 지정된다.
@JacksonXmlProperty
	- 루트 요소 안에 들어갈 하위 요소들을 지정한다
	- 이 때, 위의 id처럼 isAttribute = true를 지정하면 루트태그의 속성으로 들어가게 된다
	- localName 속성을 지정하면 지정한 값으로 요소가 표기된다

설명만으로는 이해가 어려울 수 있으니, 이 클래스를 xml로 직접 써보면 이런 형식이 될 것이다
<xmember id="00">
	<name>AAA</name>
	<age>22</age>
	<dept>ZZZ</dept>
</xmember>

API 요청이 오면 이 xmember 여럿을 리스트로 뽑기 위해 MemberXmlList라는 데이터 클래스를 하나 더 추가한다

<MemberXmlList.java>
@Data
@JacksonXmlRootElement(localName = "xmemberlist")
public class MemberXmlList {
	
	@JacksonXmI Property(localName = "xmember")
	@JacksonXml Element Wrapper(useWrapping = false)
	List<MemberXml> members = new ArrayListo();
}

어노테이션 설명
@JacksonXmlRootElement(localName = "xmemberlist")
	- xmember값들의 루트 요소로서 xmemberlist라 이름을 붙인다
	- 이 클래스에서 루트 요소를 선언했기 때문에,
		앞으로 이 리스트 하위로 출력 될 Memberxml에 지정한 @JacksonXmlRootElement(localName = "xmember")는 무시 된다
@JacksonXmlProperty(localName = "xmember")
	- 리스트로 출력될 각각의 아이템 요소들의 요소명을 xmember로 지정한다
@JacksonXmlElementWrapper(useWrapping = false)
	- 이 어노테이션에 지정된 값을 요소로 묶을 것인지 결정하는 역할을 하며 기본값은 true이다
	- 우리는 <xmemberlist>라는 루트 요소 바로 아래에 각 xmember 리스트를 나열할 것이기 때문에 이를 또 하나의 요소로 감쌀 필요는 없다
		따라서 여기서는 useWrapping=false로 지정해야 한다

<참고> @JacksonXmlElementWrapper 부연 설명
@JacksonXmlElementWrapper(useWrapping = false) 로 출력되는 xml은 다음과 같다
<xmemberlist>
	<xmember id="1">
		<name>AAA</name>
		<age>22</age>
		<dept>it</dept>
	</xmember>
	<xmember id="2">
		<name>BBB</name>
		<age>24</age>
		<dept>ia</dept>
	</xmember>
	...
</xmemberlist>

이번에는 useWrapping = true를 지정하고, 차이점을 보기 위해 localName = "wrapper"도 추가하여 확인해 보도록 한다
@JacksonXmlElementWrapper(useWrapping = true, localName = "wrapper")
<xmemberlist>
	<wrapper>
		<xmember id="1">
			<name>AAA</name>
			<age>22</age>
			<dept>it</dept>
		</xmember>
		<xmember id="2">
			<name>BBB</name>
			<age>24</age>
			<dept>ia</dept>
		</xmember>
		...
	</wrapper>
</xmemberlist>
처럼 <wrapper>라는 요소가 xmember들을 한 번 더 감싸고 있는 현태가 된다



3. API Controller에 xml을 반환할 메소드 추가(produces 속성 지정)
xml로 response를 보낼 준비는 끝났고, 이제 컨트롤러에 메서드를 추가한다

@Get Mapping path = "/xml", produces = MediaType. APPLICATION_XML_VALUE)
public MemberXmlList getAllMembersXML() {
	List<MemberXml> list = new ArrayList<MemberXml>();
	list.add(new MemberXml(1, "AAA", 22, "it"));
	List.add(new MemberXmI(2, "BBB", 24, "ia"));
	List.add(new MemberXml(3, "CCC", 25, "ix"));
	List.add(new MemberXml(4. "DDD", 26, "iy"));

	MemberXmlList res = new MemberXmlList();
	res.setMembers(list);

	return res:
}

@GetMapping으로 GET 메소드를 처리하는 메소드이다
path는 개발 중인 환경에 맞춰서 정하고,
produces = MediaType.APPLICATION_XML_VALUES로 작성하여 출력 형식을 xml로 지정한다
(이런 식으로 MediaType Enum 지정으로 xml 외에 json, text 등으로의 출력이 가능하다)

<참고> 작성한 API의 출력 결과 확인
<xmemberlist>
	<xmember id="1">
		<name>AAA</name>
		<age>22</age>
		<dept>it</dept>
	</xmember>
	<xmember id="2">
		<name>BBB</name>
		<age>24</age>
		<dept>ia</dept>
	</xmember>
	<xmember id="3">
		<name>CCC</name>
		<age> 25</age>
		<dept>ix</dept>
	</xmember>
	<xmember id="4">
		<name>DDD</name>
		<age>26</age>
		<dept>iv</dept>
	</xmember>
</xmemberlist>