//MimeMessage 객체를 직접 생성하여 메일을 발송하는 방법
//MimeMessage 대신 SimpleMailMessage를 사용할 수도 있으며,
//둘의 차이점은 MimeMessage의 경우 멀티파트 데이터를 처리 할 수 있고 SimpleMailMessage는 단순한 텍스트 데이터만 전송이 가능
@RequestMapping(value = "/sendMail", method = RequestMethod.GET)
public void sendMailTest() throws Exception{
    String subject = "test 메일";
    String content = "메일 테스트 내용";
    //이미지를 첨부하는 방법은 html 허용을 설정했기때문에 이미지 태그(<img>)를 사용
    //String content = "메일 테스트 내용" + "<img src=\"https://t1.daumcdn.net/cfile/tistory/214DCD42594CC40625\">";
    String from = "bookmarket@naver.com";
    String to = "vkdlxj3tp@naver.com";
    
    try {
        MimeMessage mail = mailSender.createMimeMessage();
        MimeMessageHelper mailHelper = new MimeMessageHelper(mail, true, "UTF-8");   // true는 멀티파트 메세지를 사용하겠다는 의미 (이미지 / 업로드 전송을 위해)
        /* 단순한 텍스트 메세지만 사용시엔 아래의 코드도 사용 가능 
         * MimeMessageHelper mailHelper = new MimeMessageHelper(mail,"UTF-8"); */

        // 빈에 아이디 설정한 것은 단순히 smtp 인증을 받기 위해 사용, 따라서 보내는이(setFrom())반드시 필요
        // 보내는이와 메일주소를 수신하는이가 볼때 모두 표기 되게 원하신다면 아래의 코드를 사용하시면 됩니다.
        //mailHelper.setFrom("보내는이 이름 <보내는이 아이디@도메인주소>");
        mailHelper.setFrom(from);
        mailHelper.setTo(to);
        mailHelper.setSubject(subject);
        mailHelper.setText(content, true);   // true는 html을 사용하겠다는 의미 (이미지 / 업로드 전송을 위해)
        /* 단순한 텍스트만 사용하신다면 다음의 코드를 사용하셔도 됩니다. mailHelper.setText(content); */
        
        // 업로드 된 파일을 전송 시
        //FileSystemResource file = new FileSystemResource(new File("D:\\test.txt")); 
        //mailHelper.addAttachment("업로드파일.형식", file);
        
        mailSender.send(mail);   //메일 전송
    } catch(Exception e) {
        e.printStackTrace();
    }
}

//MimeMessagePreparator를 사용해서 메일을 전송하는 방법
//MimeMessage를 직접 객체화 하지 않고 MimeMessagePreparator 클래스를 사용하는 방식
@RequestMapping(value = "/sendMail", method = RequestMethod.GET)
public void sendMailTest2() throws Exception{
    String subject = "test 메일";
    String content = "메일 테스트 내용.";
    String from = "보내는이 아이디@도메인주소";
    String to = "받는이 아이디@도메인주소";
    
    final MimeMessagePreparator preparator = new MimeMessagePreparator() {
        public void prepare(MimeMessage mimeMessage) throws Exception{
            final MimeMessageHelper mailHelper = new MimeMessageHelper(mimeMessage, true, "UTF-8");   //true 멀티파트 메세지 허용 (이미지 / 업로드 전송을 위해)
            
            mailHelper.setFrom(from);
            mailHelper.setTo(to);
            mailHelper.setSubject(subject);
            mailHelper.setText(content, true);   // true는 html을 사용하겠다는 의미 (이미지 / 업로드 전송을 위해)
        }
    };
    
    try {    
        mailSender.send(preparator);
    } catch(Exception e) {
        e.printStackTrace();
    }        
}


javax.mail.MessagingException : could not connect to host "smtp.naver.com", port: 465, response: -1 에러
자바 설치 경로의 java.security 파일의 TLS 버전 설정 때문에 발생
자바 버전이 업그레이드 되면서 java.security 의	TLSv1.0 하고 TLSv1.1 이 Disabled 되면서 SMTP 연결이 되지 않은 것으로 추정

제가 JDK 11.0.13 쓰는데 TLS 1.0과 TLS 1.1을 지원하지 않아 발생한 문제
저 같은 경우는

C://Program Files//Java//jdk-11.0.13//conf//security

경로에 java.security 파일이 있었는데

이 파일에서

jdk.tls.disabledAlgorithms=SSLv3, TLSv1.0, TLSv1.1, RC4, DES, MD5withRSA,
DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL,
include jdk.disabled.namedCurves

구문을

jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA,
DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL,
include jdk.disabled.namedCurves

이렇게 바꾸고 저장하니 정상 동작 됩니다